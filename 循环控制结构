  

  循环控制结构与循环语句

  1.while循环语句

while循环与for循环类似，只是在语法和格式上有些不同

其语法为：
while（条件表达式）

{  

 循环体（此处存在自增）

}

例：

```c
int i=0;
while(i<11)
{ 
    i++;
}
 printf("回去增龄-%d\n",i);
return 0;
```

注意：便于维护程序，循环体内只有一条也要用花括号围起来。

  do-while语句

do

{

语句序列

}while（条件表达式）

举例：

```c
int i+1;
do
{
    i++;
    
}while(i<11)
    printf("回去增龄-%d\n",i);
return 0;
```

注意:对do -while语句来说，由于先执行循环体后计算并判断循环控制条件为真还是为假，所以循环体内的依据至少执行一次。

  for语句

for(初始化表达式;循环控制表达式;增值表达式)

{

语句序列

}

注意：如何对循环变量增值，决定循环执行次数，如果在循环体内改变这个变量的值，将改变循环正常执行的次数。

```c
int i ,n, sum;
printf("Input n:");
scanf("%d",&n);
sum=0;
for(i=1;i<=n;i++)
{
    sum=su+i;
}
printf("sum=%d\n",sum);
return 0;
```
  逗号运算符

逗号运算符可以把多个表达是连接在一起，构成逗号表达式

表达形式：表达式1,表达式2，...表达式n

空语句：由一个分号构成的语句。

for语句后面一般不加分号，除非特殊情况。行末的分号无作用，只起延时左作用。

  死循环

```c
i=1;
while(i<=n); //行末的分号有可能导致死循环
{
    sum=sum+i;
    i++;
}
```

跳转语句

break：结束循环结构和for，while，do-while或者分支结构 Switch当前的执行。

continue：结束本次循环，继续执行下一次循环（后面代码不执行，但循环继续）

return：一旦在循环体内执行return，直接结束该方法，循环也直接结束。

类型溢出：超出变量的范围。

